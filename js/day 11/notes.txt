* Higher Order Function : 
* Functions which take other function as a parameter or return a function as a value.


* Callback : 
* callback is a function passed as an argument to another function.
* callback function can run after another function has finished.


* Example :

* normal function

function display(text){
    return text
    }
    
    function first() {
      return display("Hello");
    }
    
    function second() {
      return display("Goodbye");
    }
    
    console.log(first())
    console.log(second())


* Sequence Control :

function display(text){
    return text
    }
    
    function first(text) {
      return display(text) + 1;
    }
    
    function second(text) {
      return display(text) + 2;
    }

    console.log(first(1))
    let sum = first(1)
    console.log(second(sum))


* callback :

function display(text){
    return text
}

function first(text,callback) {
    let sum = display(text) + 1
    return callback(sum);
}

function second(text) {
    return display(text) + 2;
}

console.log(first(1, second))


* Returning function : return function as a valueâ€‹

Example :

const first = n =>{
    const second = m =>{
      return n * m
    }
    return second
  }

console.log(first(2)(3))


* Further more build-in methods:

* forEach
* map
* filter
* reduce
* find
* findIndex
* sort
*      String values
*      Numeric values
*      Object Arrays


* forEach:
* Iterate an array elements and it will not return any value.

* Syntax : forEach((element) => { ... } )
* Syntax : forEach((element, index) => { ... } )

* Example :

let sum = 0;
const numbers = [1,2,3,4,5];
numbers.forEach(num => sum += num)

console.log(sum)

* map : 
* Iterate an array elements and modify the array elements and it will return a value.

* Syntax : map((element) => { ... } )
* Syntax : map((element, index) => { ... } )

* Example :


const numbers = [1,2,3,4,5];
const multiByTwo = numbers.map(num => num * 2)
console.log('multiByTwo:', multiByTwo)

* filter :
* creates a new array with all elements that pass the test implemented by the provided function.

* Syntax : filter((element) => { ... } )
* Syntax : filter((element, index) => { ... } )

* Example :
const countries = [
    'Canada',
    'Denmark',
    'Finland',
    'Germany',
    'Ireland',
    'Japan',
    'India',
  ]
  
  const array = countries.filter(country => country.toLowerCase().includes("i"))
  console.log('array:', array)


* reduce :

* Syntax : reduce((accumulator, currentValue) => { ... } )
* Syntax : reduce((accumulator, currentValue, currentIndex) => { ... } )
* Syntax : reduce((accumulator, currentValue, currentIndex, array) => { ... } )
* Syntax : reduce((accumulator, currentValue, currentIndex, array) => { ... }, initialValue)


* Example :
const array1 = [1, 2, 3, 4];
const reducer = (accumulator, currentValue, index, array) => {
    console.log(currentValue)
    console.log(accumulator)
    return accumulator + currentValue;}

console.log(array1.reduce(reducer));

console.log(array1.reduce(reducer, 5)); 


* find :
* Return the first element.

* Syntax : find((element) => { ... } )
* Syntax : find((element, index) => { ... } )

* Example :

const ages = [24, 22,15, 25, 32, 35, 18]
const age = ages.find((age) => age < 20)

console.log(age)


* findIndex: 
* Return the position of the first element.

* Syntax : findIndex((element) => { ... } )
* Syntax : findIndex((element, index) => { ... } )

* Example:
const ages = [16,24, 22,15, 25, 32, 35, 18]
const age = ages.findIndex((age) => age < 20)

console.log(age)


* sort :
* method sorts the elements of an array in place and returns the sorted array.

* Syntax : sort()

* Example:

* String
const product = ["facebook", "twitter", "whatsapp", "google", "netflix", "amazon"]
console.log('product:', product.sort())


* Number
const numbers = [9.81, 3.14, 100, 37]
* normal way
console.log('numbers:', numbers.sort())

* ascending order
console.log('numbers:', numbers.sort((a,b) => a - b))

* descending order
console.log('numbers:', numbers.sort((a,b) => b - a))


* Object 

const user = [{name: "john"},{name: "nive"}, {name: "raksgod"},{name: "dee"} ]
const copy  = user.sort((a, b) => {
    if (a.name < b.name) return -1
    if (a.name > b.name) return 1
    return 0
  })
console.log('user:', copy)


* setInterval :
* it do for continuous time of interval.

* // give milliseconds in duration
* // 1 second = 1000 milliseconds
* Syntax : setInterval(callback, duration) 

* Example:

const hello = ()=>{console.log('hello')}

const start = setInterval(hello, 1000)

* To stop :
clearInterval(start)

* setTimeout :
* execute some action at time in future.

* // give milliseconds in duration
* // 1 second = 1000 milliseconds
* Syntax : setTimeout(callback, duration) 

* Example:

const hello = ()=>{console.log('hello')}

const start = setTimeout(hello, 2000)

* To stop:
clearTimeout(start)

* -- Small Test --

const data = [
    {country: 'English',count:91},
    {country: 'French',count:45},
    {country: 'Arabic',count:25},
    {country: 'Spanish',count:24},
    {country:'Russian',count:9},
    {country:'Portuguese', count:9},
    {country:'Dutch',count:8},
    {country:'German',count:7},
    {country:'Chinese',count:5},
    {country:'Swahili',count:4}
    ]

* /// Output

* [
* {country: 'English',count: 91},
* {country: 'French',count: 45},
* {country: 'Arabic',count: 25},
* ]





* --- Answer ---
    const result = data.filter(value => value.count > 24)
    console.log('result:', result)